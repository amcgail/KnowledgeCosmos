Frontend Documentation
=====================

The frontend of the Knowledge Cosmos provides an interactive visualization interface for exploring academic papers projected into a 3D semantic space. This document covers the architecture, key components, and features of the frontend system.

Core Components
-------------

Viewer (viewer.js)
~~~~~~~~~~~~~~~~

The Viewer component is the core rendering engine, responsible for displaying the 3D point cloud and mesh visualizations using Potree and Three.js. It initializes the WebGL context, configures lighting and camera parameters, and manages the render loop. The viewer employs techniques like Eye Dome Lighting (EDL) for enhanced depth perception and optimizes rendering through adaptive point sizes and a logarithmic depth buffer to handle the vast scale of the data.

Controls (controls.js)
~~~~~~~~~~~~~~~~~~~

The Controls component handles all user input related to navigating and interacting with the 3D scene. It provides intuitive camera controls using mouse and keyboard (WASD/Arrows for movement, R/F for up/down, Spacebar for boost), supporting both free-flight exploration and orbiting around points of interest. Selection tools allow users to interact with individual papers (point picking) or select regions of the point cloud (rectangle selection).

Field Management
--------------

The FieldManager organizes and visualizes academic disciplines within the 3D space. It loads hierarchical field data (fields and subfields) and manages their display properties, including color schemes defined in the backend processing. Users can interact with an expandable legend to filter the view based on specific disciplines or sub-disciplines. The FieldManager dynamically loads detailed point clouds for selected fields from pre-processed Potree datasets, enabling focused exploration of specific research areas.

Constellation Visualization
--------------------------

Complementing the point cloud, the Knowledge Cosmos visualizes academic fields as 3D "constellations" â€“ wireframe meshes representing field boundaries. These meshes are generated by the backend using an alpha-shape algorithm on the underlying paper embeddings. Users can toggle the visibility of multiple constellations, change their colors, and create intersections between fields. Intersections are calculated client-side using constructive solid geometry (CSG) to show where disciplines overlap. An efficient event delegation pattern manages interactions with the constellation legend (adding, removing, intersecting, coloring), ensuring responsiveness even with numerous constellations displayed.

User Interface
------------

The UIManager orchestrates the overall user interface, built with jQuery. It manages the main menu, sidebars (for filters, constellations, history), information panels, and user feedback elements like loading indicators and help tips. It coordinates interactions between different UI panels and the core visualization components, ensuring a cohesive user experience. It handles the display of interactive tips, search functionality within panels, and state management for UI elements.

Paper Management
-------------

The PaperManager is responsible for handling data and interactions related to individual academic papers within the visualization. When a point (representing a paper) is selected, the PaperManager fetches detailed metadata (title, authors, abstract, venue, year, DOI) from the Semantic Scholar API (with local caching for performance). It displays this information in a dedicated panel and manages user interactions like bookmarking papers and tracking viewing history using localStorage. The history feature allows users to easily revisit previously viewed papers, restoring the camera position and selection state.

Interaction Patterns
-----------------

The frontend supports various interaction patterns for exploring the knowledge space. Users can freely navigate the 3D embedding, select individual papers for detailed information, filter the view by academic field or publication year, and visualize the structure of disciplines using constellations and intersections. These tools facilitate both broad exploration of the academic landscape and focused investigation of specific research areas or interdisciplinary connections.

Performance Considerations
-----------------------

Given the potential scale of the dataset, performance is a key consideration. The backend pre-processes data into efficient formats (Potree point clouds, optimized meshes). The frontend utilizes Potree's level-of-detail rendering for point clouds, adaptive point sizing, and efficient caching mechanisms (for field data, point clouds, and paper metadata). Rendering is further optimized using techniques like frustum culling and view-dependent updates to ensure a smooth interactive experience.

Development Best Practices
--------------------------

For guidelines on coding standards, testing, error handling, and detailed performance tuning specific to the frontend, please refer to the :doc:`frontend/best_practices` document. 