<!--
trails ... https://three-nebula.org/examples/point-zone
shiny ... https://threejs.org/examples/#webgl_materials_cubemap_dynamic
blurry ... https://github.com/Domenicobrz/Blurry [omfg]
most beautiful blobs ... https://blobmixer.14islands.com/
-->

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="description" content="">
    <meta name="author" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>The Knowledge Cosmos</title>

    <link rel="stylesheet" type="text/css" href="/potree/potree.css">
    <link rel="stylesheet" type="text/css" href="/libs/jquery-ui/jquery-ui.min.css">
    <link rel="stylesheet" type="text/css" href="/libs/openlayers3/ol.css">
    <link rel="stylesheet" type="text/css" href="/libs/spectrum/spectrum.css">
    <link rel="stylesheet" type="text/css" href="/libs/jstree/themes/mixed/style.css">"

    <style>
        @font-face {
            font-family: robo;
            src: url(/RobotoMono.ttf);
        }
        
        
        @font-face {
            font-family: cyber;
            src: url(/CyberGraphLight.ttf);
        }
        
        
    
        body {
            font-family: robo;/*, "Lato", Helvetica, Arial, Lucida, sans-serif;*/
        }
        body {
            font-family: robo;
            font-size: 10pt;
        }
        
        #legend {
            max-height: calc(100% - 100px);
            overflow-y: scroll;
        }
        
        #menu {
            position: absolute;
            top: 0;
            left: 0;
            color: white;
            z-index: 1;
            cursor: pointer;
            padding: 20px;
        }
        
        #menu .item {
            display: inline-block;
            margin-right: 3px;
            text-decoration: underline;
        }

        .swatch {
            width: 15px;
            height: 15px;
            display: inline-block;
            margin-right: 6px;
        }

        #game_info {
            color: black;
            background-color: rgba(255,255,255,1);
            font-size: 13pt;
            z-index: 2;
            position: absolute;
            padding: 10px 20px;
            margin: 10px;
            border: solid 20px rgb(50, 10, 43);
            bottom: 0; left: 0;
        }

        #legend .legend_item {
            cursor: pointer;display: block;
        }

        .label {
            display: inline-block;
        }

        #game_info a, #paper_info a {
            color: black;
            text-decoration: underline;
        }

        #prettier_game_info {
            color: white;
            font-size: 18px;
            text-transform: none;
            position: relative;
            z-index: 2;
            margin: auto;
            top: 30%;
            width: 100%;
            max-width: 800px;
            padding: 10px;
            text-align: center; // uncertain
        }

        #labels .floating_text {
            position: absolute;
        }
        #labels {
            z-index: 2;
            color: white;
            position: absolute;
            top: 0;
            left: 0;
        }

        #reporting {
            color: black;
            background-color: rgba(255,255,255,0.7);
            font-size: 15px;
            position: absolute;
            z-index: 2;
            margin: auto;
            bottom: 0;
            padding: 2px;
            text-align: center;
            width: 100%;
        }
        
        #paper_info {
            color: black;
            background-color: rgb(255, 255, 255);
            font-size: 13px;
            z-index: 2;
            position: relative;
            padding: 2px;
            width: 30%;
            text-align: center;
            margin: auto;
            border-radius: 15px;
            padding: 10px;
            position: absolute;
            top: 60px;
            left: 35%;
        }
        
        #constellation p {
            margin: 0 0 20px;
            font-size: 10pt;
        }
        .right_boy {
            position: relative;
            float: right;
            width: 300px;
            z-index: 2;
            background-color: white;
            padding: 15px;
            border-radius: 15px;
            margin-right: 22px;
            margin-top: 5px;
        }
        
        .linky {
            display: inline-block;
            margin-right: 3px;
            text-decoration: underline;
            cursor: pointer;
            position: absolute;
            bottom: 22px;
            z-index: 2;
            color: white;
            padding: 15px;
        }
        
        #tips_link {
            left: 22px;
        }
        
        #comment_link {
            left: 80px;
        }
        
        
        #tips {
            color: black;
            background-color: rgba(255,255,255,1);
            font-size: 10pt;
            position: absolute;
            z-index: 2;
            bottom: 22px;
            left: 22px;
            padding: 15px;
            text-align: center;
            width: 400px;
            display: none;
            border-radius: 15px;
        }
        
        .lab {
            vertical-align: top;
            display: inline-block;
            line-height: 25px;
            font-size: 10pt;
        }
        
        #const_legend .legend_item {
            padding: 5px;
        }
            
        #const_legend {
            background-color: black;
            border-radius: 15px;
            margin-top: 10px;
            color: white;
        }
        
        #const_legend .link {
            text-decoration: underline;
            cursor: pointer;
            vertical-align: top;
            display: inline-block;
            line-height: 25px;
            margin-left: 5px;
        }
    </style>
</head>

<body>
    <script src="/libs/jquery/jquery-3.1.1.min.js"></script>
    <script src="/libs/spectrum/spectrum.js"></script>
    <script src="/libs/jquery-ui/jquery-ui.min.js"></script>
    <script src="/libs/other/BinaryHeap.js"></script>
    <script src="/libs/tween/tween.min.js"></script>
    <script src="/libs/d3/d3.js"></script>
    <script src="/libs/proj4/proj4.js"></script>
    <script src="/libs/openlayers3/ol.js"></script>
    <script src="/libs/i18next/i18next.js"></script>
    <script src="/libs/jstree/jstree.js"></script>
    <script src="/potree/potree.js"></script>
    <script src="https://fariskassim.com/stage/rebel9/teaf/blob/v4/js/perlin.js"></script>
    <script src="/libs/plasio/js/laslaz.js"></script>
    <!--<script src="https://unpkg.com/d3-octree"></script>-->
    
    <!-- INCLUDE ADDITIONAL DEPENDENCIES HERE -->
    <!-- INCLUDE SETTINGS HERE -->
    
    <div class="potree_container" style="position: absolute; width: 100%; height: 100%; left: 0px; top: 0px; ">
        <div id="potree_render_area" style="background-color: black;"></div>
        <div id="potree_sidebar_container"> </div>
        <input id="tiffTest" type="button" value="tiff test" />
    </div>

    
    
    <script type="module">

    import {STLLoader} from "/libs/three.js/loaders/STLLoader.js";
    import * as THREE from "/libs/three.js/build/three.module.js";
    //import { PointOctree } from "sparse-octree";

    //import { DragControls } from '../libs/three.js/addons/controls/DragControls.js';

    /*
    const createMoveAnimation = ({ mesh, startPosition, endPosition }) => {
        mesh.cmixer = new THREE.AnimationMixer(mesh);
        let track = new THREE.VectorKeyframeTrack(
            '.position',
            [0, 1],
            [
            startPosition.x,
            startPosition.y,
            startPosition.z,
            endPosition.x,
            endPosition.y,
            endPosition.z,
            ]
        );
        const animationClip = new THREE.AnimationClip(null, 10, [track]);
        const animationAction = mesh.cmixer.clipAction(animationClip);

        animationAction.setLoop(THREE.LoopOnce);
        animationAction.play();

        mesh.cclock = new THREE.Clock();
        //this.animationsObjects.push(mesh);
    };
    */

    // used this for the book, which was a nicer aesthetic, sorta..
    // I can fine-tune the blob (or randomize it!)
    const sphereMaterial = new THREE.MeshBasicMaterial( {color: 0xffffff, wireframe:true} );
    /*const sphereMaterial = new THREE.MeshLambertMaterial( {
        color: 0x049ef4,
        //emissive: 0x8e8e8e,
        shininess: 40
    } );*/

    
        window.viewer = new Potree.Viewer(document.getElementById("potree_render_area"), {
            useDefaultRenderLoop: false,
            logarithmicDepthBuffer: true // don't think this does anything. I found it in a blog, that putting this into WebGLRenderer constructor reduces flickering from z-fighting
        });
        
        viewer.setEDLEnabled(true);
        viewer.setFOV(60);
        //viewer.setPointBudget(2_000_000);
        //viewer.setPointBudget(500_000);
        viewer.setPointBudget(750_000);
        viewer.setMinNodeSize(0);

        // fly around
        viewer.setControls(viewer.fpControls);
        viewer.fpControls.lockElevation = false;


        //viewer.loadSettingsFromURL();
        viewer.setServer("http://localhost:8000");
        
        viewer.setDescription("");
        
        viewer.loadGUI().then(() => {
            viewer.setLanguage('en');
            $("#menu_appearance").next().show();
            // viewer.toggleSidebar();
        });
        
        /*
        let light = new THREE.SpotLight();
        light.distance = 15;
        light.angle = (60 / 180) * Math.PI;
        light.position.set(415.005, 354.499, 371.803);
        light.lookAt(new THREE.Vector3(1.219, -0.171, 2.776));
        viewer.scene.scene.add(light);
        */

        // the lights never followed, so I'll just use this ambient light
        // because I'm tired of fiddling
        const light2 = new THREE.AmbientLight( 0x404040 );
        viewer.scene.scene.add(light2);

        window.camera = viewer.scene.getActiveCamera();
        //let pointLight = new THREE.PointLight( 0xffffff, 1000, 1000, 0 );

        //let spin = new THREE.

        /*

        let sph = new Potree.SpotLightHelper(light, new THREE.Color().setHex(0xff0000));
        viewer.scene.scene.add(sph);


        let cubeRenderTarget = new THREE.WebGLCubeRenderTarget( 256 );
        cubeRenderTarget.texture.type = THREE.HalfFloatType;

        let cubeCamera = new THREE.CubeCamera( 1, 1000, cubeRenderTarget );

        let material = new THREE.MeshStandardMaterial( {
            envMap: cubeRenderTarget.texture,
            roughness: 0.05,
            metalness: 1
        } );

        let sphere = new THREE.Mesh( new THREE.IcosahedronGeometry( 1, 8 ), material );
        viewer.scene.scene.add( sphere );


        const material2 = new THREE.MeshStandardMaterial( {
            roughness: 0.1,
            metalness: 0
        } );

        let cube = new THREE.Mesh( new THREE.BoxGeometry( 0.1, 0.1, 0.1 ), material2 );
        viewer.scene.scene.add( cube );

        let torus = new THREE.Mesh( new THREE.TorusKnotGeometry( 0.4, 0.2, 128, 16 ), material2 );
        viewer.scene.scene.add( torus );

        /*const controls = new THREE.DragControls( [torus,cube,sphere], viewer.scene.cameraO, viewer.renderer.domElement );

        // add event listener to highlight dragged objects

        controls.addEventListener( 'dragstart', function ( event ) {
            event.object.material.emissive.set( 0xaaaaaa );
        } );

        controls.addEventListener( 'dragend', function ( event ) {
            event.object.material.emissive.set( 0x000000 );
        } );*/
        function getColor(){ 
            return [ Math.random(),
                    (0.5 + 0.5 * Math.random()),
                    (0.5 + 0.5 * Math.random())]
        }
        
        function hslToRgb(h, s, l){
            var r, g, b;
        
            if(s == 0){
                r = g = b = l; // achromatic
            }else{
                var hue2rgb = function hue2rgb(p, q, t){
                    if(t < 0) t += 1;
                    if(t > 1) t -= 1;
                    if(t < 1/6) return p + (q - p) * 6 * t;
                    if(t < 1/2) return q;
                    if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;
                    return p;
                }
        
                var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
                var p = 2 * l - q;
                r = hue2rgb(p, q, h + 1/3);
                g = hue2rgb(p, q, h);
                b = hue2rgb(p, q, h - 1/3);
            }
        
            return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];
        }
            
        function hslToHex(h, s, l) {
            var a = hslToRgb(h,s,l);
            return a[0]*(16**4) + a[1]*(16**2) + a[2]
            //return `#${f(0)}${f(8)}${f(4)}`;
        }


        window.highlight = function (which, callback){
            
            var ret = {}
            callback = callback || function(){};

            // fetch and display the info
            $.ajax({
                "url": "/q/subgroups",
                "method": "GET",
                crossDomain: true,
                "data": {'of':which},
                "success": function(resp){
                    console.log(resp)
                }
            });

            var material = new THREE.MeshDepthMaterial();
            material = new THREE.MeshStandardMaterial({
                emissive: 0x000000,
            });
            
            var c1 = getColor();
            var c2 = hslToRgb.apply(null, c1);
            var c3 = hslToHex.apply(null, c1);
            
            console.log( c1, c2, c3 );
            
            ret.color = c2;
            ret.name = which;
            
            material = new THREE.MeshPhongMaterial( { color: 0x000000, specular: 0x666666, emissive: c3, shininess: 0, opacity: 0.9, transparent: true,
                wireframe: true,
                wireframeLinewidth: 2 } );
                
            material = new THREE.MeshBasicMaterial({
                color: c3,
                wireframe: true,
                wireframeLinewidth: 10
            });

            function animate_flash(){
                const X = {op:1}
                var tw1 = new TWEEN.Tween(X)
                    .to({op:0}, 500)
                    .onUpdate(() => {
                        viewer.setEDLOpacity(X.op)
                        mesh.material.opacity = 1-X.op
                        console.log(mesh.material.opacity)
                    });
                var tw2 = new TWEEN.Tween(X)
                    .to({op:1}, 500)
                    .onUpdate(() => {
                        viewer.setEDLOpacity(X.op)
                        mesh.material.opacity = 1-X.op
                    });

                tw2.onComplete(function(){
                    viewer.scene.scene.remove(mesh);
                })

                tw1.chain(tw2).start();
            }

            function permanent_highlight(){
                const X = {op:viewer.edlOpacity}
                var tw1 = new TWEEN.Tween(X)
                    .to({op:0.8}, 500)
                    .onUpdate(() => {
                        viewer.setEDLOpacity(X.op)
                        mesh.material.opacity = 0.8
                    });

                tw1.start();
            }
            
            const loader = new STLLoader()
            var mesh;
            loader.load(
                `/field_meshes/${which}.stl`,
                function (geometry) {
                    mesh = new THREE.Mesh(geometry, material)
                    mesh.scale.set(100,100,100)
                    material.transparent = true;
                    viewer.scene.scene.add(mesh)
                    console.log('got it!', mesh)
                    
                    ret.mesh = mesh;
                    
                    permanent_highlight();
                    callback(ret);
                },
                (xhr) => {
                    console.log((xhr.loaded / xhr.total) * 100 + '% loaded')
                },
                (error) => {
                    console.log(error)
                }
            )

        }

        window.fields = ["Accounting", "Acoustics", "Actuarial science", "Advertising", "Aeronautics", "Aerospace engineering", "Aesthetics", "Agricultural economics", "Agroforestry", "Agronomy", "Algebra", "Algorithm", "Analytical chemistry", "Anatomy", "Ancient history", "Andrology", "Anesthesia", "Animal science", "Anthropology", "Applied mathematics", "Applied psychology", "Archaeology", "Architectural engineering", "Arithmetic", "Art", "Art history", "Artificial intelligence", "Astrobiology", "Astronomy", "Astrophysics", "Atmospheric sciences", "Atomic physics", "Audiology", "Automotive engineering", "Biochemical engineering", "Biochemistry", "Bioinformatics", "Biological system", "Biology", "Biomedical engineering", "Biophysics", "Biotechnology", "Botany", "Business", "Calculus", "Cancer research", "Cardiology", "Cartography", "Cell biology", "Chemical engineering", "Chemical physics", "Chemistry", "Chromatography", "Civil engineering", "Classical mechanics", "Classics", "Climatology", "Clinical psychology", "Cognitive psychology", "Cognitive science", "Combinatorial chemistry", "Combinatorics", "Commerce", "Communication", "Composite material", "Computational biology", "Computational chemistry", "Computational physics", "Computational science", "Computer architecture", "Computer engineering", "Computer graphics (images)", "Computer hardware", "Computer network", "Computer science", "Computer security", "Computer vision", "Condensed matter physics", "Construction engineering", "Control engineering", "Control theory", "Criminology", "Crystallography", "Data mining", "Data science", "Database", "Demographic economics", "Demography", "Dentistry", "Dermatology", "Development economics", "Developmental psychology", "Discrete mathematics", "Distributed computing", "Earth science", "Ecology", "Econometrics", "Economic geography", "Economic growth", "Economic history", "Economic policy", "Economic system", "Economics", "Economy", "Electrical engineering", "Electronic engineering", "Embedded system", "Emergency medicine", "Endocrinology", "Engineering", "Engineering drawing", "Engineering ethics", "Engineering management", "Engineering physics", "Environmental chemistry", "Environmental economics", "Environmental engineering", "Environmental ethics", "Environmental health", "Environmental planning", "Environmental protection", "Environmental resource management", "Environmental science", "Epistemology", "Ethnology", "Evolutionary biology", "Family medicine", "Finance", "Financial economics", "Financial system", "Fishery", "Food science", "Forensic engineering", "Forestry", "Gastroenterology", "Gender studies", "Genealogy", "General surgery", "Genetics", "Geochemistry", "Geodesy", "Geography", "Geology", "Geometry", "Geomorphology", "Geophysics", "Geotechnical engineering", "Gerontology", "Gynecology", "History", "Horticulture", "Humanities", "Human\u2013computer interaction", "Hydrology", "Immunology", "Industrial engineering", "Industrial organization", "Information retrieval", "Inorganic chemistry", "Intensive care medicine", "Internal medicine", "International economics", "International trade", "Internet privacy", "Keynesian economics", "Knowledge management", "Labour economics", "Law", "Law and economics", "Library science", "Linguistics", "Literature", "Machine learning", "Macroeconomics", "Management", "Management science", "Manufacturing engineering", "Marine engineering", "Market economy", "Marketing", "Materials science", "Mathematical analysis", "Mathematical economics", "Mathematical optimization", "Mathematical physics", "Mathematics", "Mathematics education", "Mechanical engineering", "Mechanics", "Media studies", "Medical education", "Medical emergency", "Medical physics", "Medicinal chemistry", "Medicine", "Metallurgy", "Meteorology", "Microbiology", "Microeconomics", "Mineralogy", "Molecular biology", "Molecular physics", "Monetary economics", "Multimedia", "Nanotechnology", "Natural language processing", "Natural resource economics", "Neoclassical economics", "Neuroscience", "Nuclear chemistry", "Nuclear engineering", "Nuclear magnetic resonance", "Nuclear medicine", "Nuclear physics", "Nursing", "Obstetrics", "Oceanography", "Oncology", "Operating system", "Operations management", "Operations research", "Ophthalmology", "Optics", "Optoelectronics", "Optometry", "Organic chemistry", "Orthodontics", "Paleontology", "Parallel computing", "Particle physics", "Pathology", "Pattern recognition", "Pedagogy", "Pediatrics", "Petroleum engineering", "Petrology", "Pharmacology", "Philosophy", "Photochemistry", "Physical chemistry", "Physical geography", "Physical medicine and rehabilitation", "Physical therapy", "Physics", "Physiology", "Political economy", "Political science", "Polymer chemistry", "Polymer science", "Positive economics", "Process engineering", "Process management", "Programming language", "Psychiatry", "Psychoanalysis", "Psychology", "Psychotherapist", "Public administration", "Public economics", "Public relations", "Pulp and paper industry", "Pure mathematics", "Quantum electrodynamics", "Quantum mechanics", "Radiochemistry", "Radiology", "Real-time computing", "Regional science", "Reliability engineering", "Religious studies", "Remote sensing", "Risk analysis (engineering)", "Seismology", "Simulation", "Social psychology", "Social science", "Socioeconomics", "Sociology", "Software engineering", "Soil science", "Speech recognition", "Statistical physics", "Statistics", "Stereochemistry", "Structural engineering", "Surgery", "Systems engineering", "Telecommunications", "Theology", "Theoretical computer science", "Theoretical physics", "Thermodynamics", "Topology", "Toxicology", "Traditional medicine", "Transport engineering", "Urology", "Veterinary medicine", "Virology", "Visual arts", "Waste management", "Water resource management", "Welfare economics", "World Wide Web", "Zoology"]
        window.subfield_colors = {"Psychology": {"Psychoanalysis": [0.796875, 0.0, 0.0], "Psychiatry": [0.99609375, 0.6953125, 0.6953125], "Developmental psychology": [0.99609375, 0.53125, 0.0], "Mathematics education": [0.99609375, 0.73046875, 0.19921875], "Neuroscience": [0.99609375, 0.89453125, 0.390625], "Cognitive psychology": [0.26171875, 0.39453125, 0.0], "Cognitive science": [0.3984375, 0.59765625, 0.0], "Pedagogy": [0.59765625, 0.796875, 0.0], "Communication": [0.59765625, 0.19921875, 0.796875], "Psychotherapist": [0.6640625, 0.3984375, 0.796875], "Clinical psychology": [0.734375, 0.57421875, 0.81640625], "Criminology": [0.0, 0.4453125, 0.59765625], "Applied psychology": [0.19921875, 0.70703125, 0.89453125]}, "Political science": {"Law": [0.796875, 0.0, 0.0], "Public relations": [0.99609375, 0.6953125, 0.6953125]}, "Mathematics": {"Statistics": [0.796875, 0.0, 0.0], "Algorithm": [0.99609375, 0.6953125, 0.6953125], "Discrete mathematics": [0.99609375, 0.53125, 0.0], "Algebra": [0.99609375, 0.73046875, 0.19921875], "Topology": [0.99609375, 0.89453125, 0.390625], "Mathematical analysis": [0.26171875, 0.39453125, 0.0], "Mathematical economics": [0.3984375, 0.59765625, 0.0], "Mathematics education": [0.59765625, 0.796875, 0.0], "Geometry": [0.59765625, 0.19921875, 0.796875], "Applied mathematics": [0.6640625, 0.3984375, 0.796875], "Calculus": [0.734375, 0.57421875, 0.81640625], "Mathematical physics": [0.0, 0.4453125, 0.59765625], "Operations research": [0.19921875, 0.70703125, 0.89453125], "Computational science": [0.5546875, 0.83203125, 0.9375], "Control theory": [0.99609375, 0.49609375, 0.74609375]}, "Environmental science": {"Environmental resource management": [0.796875, 0.0, 0.0], "Soil science": [0.99609375, 0.6953125, 0.6953125], "Water resource management": [0.99609375, 0.53125, 0.0], "Environmental protection": [0.99609375, 0.73046875, 0.19921875], "Environmental engineering": [0.99609375, 0.89453125, 0.390625], "Environmental planning": [0.26171875, 0.39453125, 0.0]}, "Computer science": {"Human\u2013computer interaction": [0.796875, 0.0, 0.0], "Algorithm": [0.99609375, 0.6953125, 0.6953125], "Data mining": [0.99609375, 0.53125, 0.0], "World Wide Web": [0.99609375, 0.73046875, 0.19921875], "Artificial intelligence": [0.99609375, 0.89453125, 0.390625], "Parallel computing": [0.26171875, 0.39453125, 0.0], "Information retrieval": [0.3984375, 0.59765625, 0.0], "Computer network": [0.59765625, 0.796875, 0.0], "Computer security": [0.59765625, 0.19921875, 0.796875], "Simulation": [0.6640625, 0.3984375, 0.796875], "Multimedia": [0.734375, 0.57421875, 0.81640625], "Knowledge management": [0.0, 0.4453125, 0.59765625], "Database": [0.19921875, 0.70703125, 0.89453125], "Real-time computing": [0.5546875, 0.83203125, 0.9375], "Theoretical computer science": [0.99609375, 0.49609375, 0.74609375]}, "Medicine": {"Anatomy": [0.796875, 0.0, 0.0], "Psychiatry": [0.99609375, 0.6953125, 0.6953125], "Internal medicine": [0.99609375, 0.53125, 0.0], "Radiology": [0.99609375, 0.73046875, 0.19921875], "Virology": [0.99609375, 0.89453125, 0.390625], "Nursing": [0.26171875, 0.39453125, 0.0], "Intensive care medicine": [0.3984375, 0.59765625, 0.0], "Pediatrics": [0.59765625, 0.796875, 0.0], "Immunology": [0.59765625, 0.19921875, 0.796875], "Anesthesia": [0.6640625, 0.3984375, 0.796875], "Cancer research": [0.734375, 0.57421875, 0.81640625], "Family medicine": [0.0, 0.4453125, 0.59765625], "Gerontology": [0.19921875, 0.70703125, 0.89453125], "Pharmacology": [0.5546875, 0.83203125, 0.9375], "Environmental health": [0.99609375, 0.49609375, 0.74609375]}, "Biology": {"Anatomy": [0.796875, 0.0, 0.0], "Biophysics": [0.99609375, 0.6953125, 0.6953125], "Endocrinology": [0.99609375, 0.53125, 0.0], "Molecular biology": [0.99609375, 0.73046875, 0.19921875], "Virology": [0.99609375, 0.89453125, 0.390625], "Neuroscience": [0.26171875, 0.39453125, 0.0], "Ecology": [0.3984375, 0.59765625, 0.0], "Immunology": [0.59765625, 0.796875, 0.0], "Cancer research": [0.59765625, 0.19921875, 0.796875], "Genetics": [0.6640625, 0.3984375, 0.796875], "Botany": [0.734375, 0.57421875, 0.81640625], "Bioinformatics": [0.0, 0.4453125, 0.59765625], "Microbiology": [0.19921875, 0.70703125, 0.89453125], "Cell biology": [0.5546875, 0.83203125, 0.9375], "Pharmacology": [0.99609375, 0.49609375, 0.74609375]}, "History": {"Archaeology": [0.796875, 0.0, 0.0], "Ancient history": [0.99609375, 0.6953125, 0.6953125], "Ethnology": [0.99609375, 0.53125, 0.0], "Art history": [0.99609375, 0.73046875, 0.19921875], "Genealogy": [0.99609375, 0.89453125, 0.390625], "Classics": [0.26171875, 0.39453125, 0.0]}, "Physics": {"Optics": [0.796875, 0.0, 0.0], "Statistical physics": [0.99609375, 0.6953125, 0.6953125], "Chemical physics": [0.99609375, 0.53125, 0.0], "Nuclear physics": [0.99609375, 0.73046875, 0.19921875], "Acoustics": [0.99609375, 0.89453125, 0.390625], "Condensed matter physics": [0.26171875, 0.39453125, 0.0], "Quantum electrodynamics": [0.3984375, 0.59765625, 0.0], "Astrophysics": [0.59765625, 0.796875, 0.0], "Nuclear magnetic resonance": [0.59765625, 0.19921875, 0.796875], "Mechanics": [0.6640625, 0.3984375, 0.796875], "Quantum mechanics": [0.734375, 0.57421875, 0.81640625], "Classical mechanics": [0.0, 0.4453125, 0.59765625], "Geophysics": [0.19921875, 0.70703125, 0.89453125], "Atmospheric sciences": [0.5546875, 0.83203125, 0.9375], "Thermodynamics": [0.99609375, 0.49609375, 0.74609375]}, "Geology": {"Oceanography": [0.796875, 0.0, 0.0], "Geodesy": [0.99609375, 0.6953125, 0.6953125], "Paleontology": [0.99609375, 0.53125, 0.0], "Soil science": [0.99609375, 0.73046875, 0.19921875], "Geochemistry": [0.99609375, 0.89453125, 0.390625], "Geotechnical engineering": [0.26171875, 0.39453125, 0.0], "Earth science": [0.3984375, 0.59765625, 0.0], "Mineralogy": [0.59765625, 0.796875, 0.0], "Hydrology": [0.59765625, 0.19921875, 0.796875], "Climatology": [0.6640625, 0.3984375, 0.796875], "Remote sensing": [0.734375, 0.57421875, 0.81640625], "Petroleum engineering": [0.0, 0.4453125, 0.59765625], "Geophysics": [0.19921875, 0.70703125, 0.89453125], "Atmospheric sciences": [0.5546875, 0.83203125, 0.9375]}, "Engineering": {"Biomedical engineering": [0.796875, 0.0, 0.0], "Embedded system": [0.99609375, 0.6953125, 0.6953125], "Geotechnical engineering": [0.99609375, 0.53125, 0.0], "Systems engineering": [0.99609375, 0.73046875, 0.19921875], "Operations management": [0.99609375, 0.89453125, 0.390625], "Transport engineering": [0.26171875, 0.39453125, 0.0], "Electronic engineering": [0.3984375, 0.59765625, 0.0], "Chemical engineering": [0.59765625, 0.796875, 0.0], "Operations research": [0.59765625, 0.19921875, 0.796875], "Management science": [0.6640625, 0.3984375, 0.796875], "Waste management": [0.734375, 0.57421875, 0.81640625], "Engineering ethics": [0.0, 0.4453125, 0.59765625], "Control theory": [0.19921875, 0.70703125, 0.89453125], "Structural engineering": [0.5546875, 0.83203125, 0.9375], "Environmental engineering": [0.99609375, 0.49609375, 0.74609375]}, "Philosophy": {"Aesthetics": [0.796875, 0.0, 0.0], "Epistemology": [0.99609375, 0.6953125, 0.6953125], "Religious studies": [0.99609375, 0.53125, 0.0], "Theology": [0.99609375, 0.73046875, 0.19921875], "Linguistics": [0.99609375, 0.89453125, 0.390625], "Environmental ethics": [0.26171875, 0.39453125, 0.0]}, "Art": {"Aesthetics": [0.796875, 0.0, 0.0], "Visual arts": [0.99609375, 0.6953125, 0.6953125], "Humanities": [0.99609375, 0.53125, 0.0], "Art history": [0.99609375, 0.73046875, 0.19921875], "Classics": [0.99609375, 0.89453125, 0.390625]}, "Sociology": {"Gender studies": [0.796875, 0.0, 0.0], "Political economy": [0.99609375, 0.6953125, 0.6953125], "Regional science": [0.99609375, 0.53125, 0.0], "Demography": [0.99609375, 0.73046875, 0.19921875], "Law and economics": [0.99609375, 0.89453125, 0.390625], "Anthropology": [0.26171875, 0.39453125, 0.0], "Pedagogy": [0.3984375, 0.59765625, 0.0], "Ethnology": [0.59765625, 0.796875, 0.0], "Media studies": [0.59765625, 0.19921875, 0.796875], "Socioeconomics": [0.6640625, 0.3984375, 0.796875], "Communication": [0.734375, 0.57421875, 0.81640625], "Criminology": [0.0, 0.4453125, 0.59765625]}, "Business": {"Finance": [0.796875, 0.0, 0.0], "Economic policy": [0.99609375, 0.6953125, 0.6953125], "Advertising": [0.99609375, 0.53125, 0.0], "Risk analysis (engineering)": [0.99609375, 0.73046875, 0.19921875], "Accounting": [0.99609375, 0.89453125, 0.390625], "Actuarial science": [0.26171875, 0.39453125, 0.0], "Marketing": [0.3984375, 0.59765625, 0.0], "Process management": [0.59765625, 0.796875, 0.0], "Industrial organization": [0.59765625, 0.19921875, 0.796875], "Commerce": [0.6640625, 0.3984375, 0.796875], "Financial system": [0.734375, 0.57421875, 0.81640625]}, "Economics": {"Public economics": [0.796875, 0.0, 0.0], "Finance": [0.99609375, 0.6953125, 0.6953125], "Environmental resource management": [0.99609375, 0.53125, 0.0], "Political economy": [0.99609375, 0.73046875, 0.19921875], "Mathematical economics": [0.99609375, 0.89453125, 0.390625], "Labour economics": [0.26171875, 0.39453125, 0.0], "Econometrics": [0.3984375, 0.59765625, 0.0], "Actuarial science": [0.59765625, 0.796875, 0.0], "Management": [0.59765625, 0.19921875, 0.796875], "Operations management": [0.6640625, 0.3984375, 0.796875], "Socioeconomics": [0.734375, 0.57421875, 0.81640625], "Development economics": [0.0, 0.4453125, 0.59765625], "Economic growth": [0.19921875, 0.70703125, 0.89453125], "Management science": [0.5546875, 0.83203125, 0.9375], "Economic history": [0.99609375, 0.49609375, 0.74609375]}, "Chemistry": {"Environmental chemistry": [0.796875, 0.0, 0.0], "Analytical chemistry": [0.99609375, 0.6953125, 0.6953125], "Nuclear chemistry": [0.99609375, 0.53125, 0.0], "Computational chemistry": [0.99609375, 0.73046875, 0.19921875], "Physical chemistry": [0.99609375, 0.89453125, 0.390625], "Chemical physics": [0.26171875, 0.39453125, 0.0], "Organic chemistry": [0.3984375, 0.59765625, 0.0], "Mineralogy": [0.59765625, 0.796875, 0.0], "Food science": [0.59765625, 0.19921875, 0.796875], "Molecular physics": [0.6640625, 0.3984375, 0.796875], "Chromatography": [0.734375, 0.57421875, 0.81640625], "Biochemistry": [0.0, 0.4453125, 0.59765625], "Stereochemistry": [0.19921875, 0.70703125, 0.89453125], "Photochemistry": [0.5546875, 0.83203125, 0.9375], "Crystallography": [0.99609375, 0.49609375, 0.74609375]}, "Materials science": {"Polymer science": [0.796875, 0.0, 0.0], "Composite material": [0.99609375, 0.6953125, 0.6953125], "Polymer chemistry": [0.99609375, 0.53125, 0.0], "Metallurgy": [0.99609375, 0.73046875, 0.19921875], "Optoelectronics": [0.99609375, 0.89453125, 0.390625]}, "Geography": {"Geodesy": [0.796875, 0.0, 0.0], "Regional science": [0.99609375, 0.6953125, 0.6953125], "Meteorology": [0.99609375, 0.53125, 0.0], "Archaeology": [0.99609375, 0.73046875, 0.19921875], "Economic geography": [0.99609375, 0.89453125, 0.390625], "Environmental protection": [0.26171875, 0.39453125, 0.0], "Cartography": [0.3984375, 0.59765625, 0.0], "Remote sensing": [0.59765625, 0.796875, 0.0], "Environmental planning": [0.59765625, 0.19921875, 0.796875], "Forestry": [0.6640625, 0.3984375, 0.796875]}, "Ceramic materials": {"Brittleness": [0.796875, 0.0, 0.0], "Grain size": [0.99609375, 0.6953125, 0.6953125], "Young's modulus": [0.99609375, 0.53125, 0.0], "Silicon carbide": [0.99609375, 0.73046875, 0.19921875], "Indentation": [0.99609375, 0.89453125, 0.390625], "Residual stress": [0.26171875, 0.39453125, 0.0], "Thermal expansion": [0.3984375, 0.59765625, 0.0], "Nanoindentation": [0.59765625, 0.796875, 0.0], "Carbide": [0.59765625, 0.19921875, 0.796875], "Fracture mechanics": [0.6640625, 0.3984375, 0.796875], "Ductility": [0.734375, 0.57421875, 0.81640625], "Volume fraction": [0.0, 0.4453125, 0.59765625], "Annealing (metallurgy)": [0.19921875, 0.70703125, 0.89453125], "Fracture toughness": [0.5546875, 0.83203125, 0.9375], "Toughness": [0.99609375, 0.49609375, 0.74609375]}, "Education": {"Mathematics education": [0.796875, 0.0, 0.0], "Medical education": [0.99609375, 0.6953125, 0.6953125], "Higher education": [0.99609375, 0.53125, 0.0], "Educational technology": [0.99609375, 0.73046875, 0.19921875], "Primary education": [0.99609375, 0.89453125, 0.390625], "Science education": [0.26171875, 0.39453125, 0.0], "Special education": [0.3984375, 0.59765625, 0.0], "Teacher education": [0.59765625, 0.796875, 0.0], "Educational research": [0.59765625, 0.19921875, 0.796875], "Educational attainment": [0.6640625, 0.3984375, 0.796875], "Grading (education)": [0.734375, 0.57421875, 0.81640625], "Nurse education": [0.0, 0.4453125, 0.59765625], "Vocational education": [0.19921875, 0.70703125, 0.89453125], "Early childhood education": [0.5546875, 0.83203125, 0.9375], "Engineering education": [0.99609375, 0.49609375, 0.74609375]}}
        window.subfields = {"Psychology": ["Psychoanalysis", "Psychiatry", "Developmental psychology", "Mathematics education", "Neuroscience", "Cognitive psychology", "Cognitive science", "Pedagogy", "Communication", "Psychotherapist", "Clinical psychology", "Criminology", "Applied psychology"], "Political science": ["Law", "Public relations"], "Mathematics": ["Statistics", "Algorithm", "Discrete mathematics", "Algebra", "Topology", "Mathematical analysis", "Mathematical economics", "Mathematics education", "Geometry", "Applied mathematics", "Calculus", "Mathematical physics", "Operations research", "Computational science", "Control theory"], "Environmental science": ["Environmental resource management", "Soil science", "Water resource management", "Environmental protection", "Environmental engineering", "Environmental planning"], "Computer science": ["Human\u2013computer interaction", "Algorithm", "Data mining", "World Wide Web", "Artificial intelligence", "Parallel computing", "Information retrieval", "Computer network", "Computer security", "Simulation", "Multimedia", "Knowledge management", "Database", "Real-time computing", "Theoretical computer science"], "Medicine": ["Anatomy", "Psychiatry", "Internal medicine", "Radiology", "Virology", "Nursing", "Intensive care medicine", "Pediatrics", "Immunology", "Anesthesia", "Cancer research", "Family medicine", "Gerontology", "Pharmacology", "Environmental health"], "Biology": ["Anatomy", "Biophysics", "Endocrinology", "Molecular biology", "Virology", "Neuroscience", "Ecology", "Immunology", "Cancer research", "Genetics", "Botany", "Bioinformatics", "Microbiology", "Cell biology", "Pharmacology"], "History": ["Archaeology", "Ancient history", "Ethnology", "Art history", "Genealogy", "Classics"], "Physics": ["Optics", "Statistical physics", "Chemical physics", "Nuclear physics", "Acoustics", "Condensed matter physics", "Quantum electrodynamics", "Astrophysics", "Nuclear magnetic resonance", "Mechanics", "Quantum mechanics", "Classical mechanics", "Geophysics", "Atmospheric sciences", "Thermodynamics"], "Geology": ["Oceanography", "Geodesy", "Paleontology", "Soil science", "Geochemistry", "Geotechnical engineering", "Earth science", "Mineralogy", "Hydrology", "Climatology", "Remote sensing", "Petroleum engineering", "Geophysics", "Atmospheric sciences"], "Engineering": ["Biomedical engineering", "Embedded system", "Geotechnical engineering", "Systems engineering", "Operations management", "Transport engineering", "Electronic engineering", "Chemical engineering", "Operations research", "Management science", "Waste management", "Engineering ethics", "Control theory", "Structural engineering", "Environmental engineering"], "Philosophy": ["Aesthetics", "Epistemology", "Religious studies", "Theology", "Linguistics", "Environmental ethics"], "Art": ["Aesthetics", "Visual arts", "Humanities", "Art history", "Classics"], "Sociology": ["Gender studies", "Political economy", "Regional science", "Demography", "Law and economics", "Anthropology", "Pedagogy", "Ethnology", "Media studies", "Socioeconomics", "Communication", "Criminology"], "Business": ["Finance", "Economic policy", "Advertising", "Risk analysis (engineering)", "Accounting", "Actuarial science", "Marketing", "Process management", "Industrial organization", "Commerce", "Financial system"], "Economics": ["Public economics", "Finance", "Environmental resource management", "Political economy", "Mathematical economics", "Labour economics", "Econometrics", "Actuarial science", "Management", "Operations management", "Socioeconomics", "Development economics", "Economic growth", "Management science", "Economic history"], "Chemistry": ["Environmental chemistry", "Analytical chemistry", "Nuclear chemistry", "Computational chemistry", "Physical chemistry", "Chemical physics", "Organic chemistry", "Mineralogy", "Food science", "Molecular physics", "Chromatography", "Biochemistry", "Stereochemistry", "Photochemistry", "Crystallography"], "Materials science": ["Polymer science", "Composite material", "Polymer chemistry", "Metallurgy", "Optoelectronics"], "Geography": ["Geodesy", "Regional science", "Meteorology", "Archaeology", "Economic geography", "Environmental protection", "Cartography", "Remote sensing", "Environmental planning", "Forestry"], "Education": ["Mathematics education", "Medical education", "Higher education", "Educational technology", "Primary education", "Science education", "Special education", "Teacher education", "Educational research", "Educational attainment", "Grading (education)", "Nurse education", "Vocational education", "Early childhood education", "Engineering education"]}
        window.pc = null;

        $(document).ready(function(){
            var $l = $("#legend");
            $l.html("")
            var top_fields = Object.keys(subfields).sort();

            window.subfield_links = []
            for(var si in top_fields){ // top level fields
                var s = top_fields[si];
                var $myl = (function(S){
                    var $s;
                    $s = $("<span class='legend_item'>").click(function(){

                        if(pc != null){
                            pc.visible = false;
                        }

                        $(".legend_expansion").remove();

                        if(!$s.data('expanded')){							

                            load_field_potree(S);

                            main_pc.visible=false;
                            
                            var $ls = $("<div class='legend_expansion'>");
                            for( var ji in window.subfields[S] ){
                                var sub = window.subfields[S][ji];
                                var c = window.subfield_colors[S][sub];
                                console.log(ji,sub,c);
                                //var rgb = `${256-c[2]*256}, ${256-c[0]*256}, ${256-c[1]*256}`;
                                var rgb = `${c[0]*256}, ${c[1]*256}, ${c[2]*256}`;
                                $ls.append(
                                    $(`<div class='swatch' style='background-color:rgb(${rgb})'>`),
                                    $("<div class='label'>").html(sub),
                                    $("<br>")
                                );
                                if( ji > 14 ) break;
                            }
                            
                            $ls.append(
                                $(`<div class='swatch' style='background-color:rgb(60,60,60)'>`),
                                $("<div class='label'>").html('Other'),
                                $("<br>")
                            );
                            $ls.insertAfter($s);
                            $(".legend_item").data('expanded', false);
                            $s.data('expanded', true);
                        } else {
                            main_pc.visible=true;
                            $s.data('expanded', false);
                        }
                    });
                    $s.data('expanded', false);
                    $s.html(S);
                    return $s;
                })(s);

                subfield_links.push($myl);
                $l.append( $myl )
            }
        })

        viewer.scene.view.position.set(28910, 74489, -6947);
        viewer.scene.view.lookAt(573.5842551496426, 450.36947654709786, 418.62651746203494);

        //var c = new Potree.Compass(viewer)
        //c.setVisible(true);
        //window.c = c;

        // we hide other modes until you get there
        $("#menu div").toggle(false);
        // $("#skip_intro").toggle(true);
        
        var intro_cancelled = false;
        
        function done_with_intro() {
            $("#prettier_game_info").html("");
            $("#menu div").toggle(true);
            $("#skip_intro").toggle(false);
            $("#tips_link").toggle(true);
            $("#comment_link").toggle(true);
        }
        
        function startPresentation() {
        
            $("#skip_intro").toggle(true);
        
            var squeue = [
                ['Changing our frame of reference invites us to explore what we know from new perspectives and angles.', 7],
                ['From the first space flight in the 1960s to observing an atom, shifting perspective allowed researchers to see what they know and what is still left to understand.', 10],
                ['Inspired by this, The Knowledge Cosmos collects 17 million research papers across disciplines and maps them into a 3D space.', 8],
                ['Our hope is that the vastness of how much knowledge is out there and how it intersects disciplines will inspire you to see where we have left to explore',9],
                ['as well as incite curiosity for disciplines you seek to learn about and find your own intersections.', 6],
                ['When we have an understanding of what we don’t know, the possibilities of discovery then become limitless. ', 9],
                ['We invite you to explore', 3],
                ['END',8],
                
                ['To navigate around the COSMOS, use the Arrow Keys or WASD to move left, right, zoom in or out. Add the space bar to speed up movement in any of those directions.', 7],
                ['Click and drag to explore around. Double click to enter the cloud and propel forward in the cloud.', 6],
                ['When you enter the cloud, click on the Colored Dots to reveal Academic Paper Titles and Links.', 6]
            ]
            var squeue_old = [
                'before thought,',
                'before investigation,',
                'perhaps this is what it was like...',
                '',//16S
                'we\'re traveling somewhere,',
                'can you see it there in the distance?',
                'a swirling gas of human knowledge',
                '',//32S
                'this is cheesy...',
                "we've collected 17M academic papers",
                "and arranged them in 3D space, based on what they cite",
                '',//48S
                "you can use your spaceship to hunt around, explore, or perhaps",
                "just wonder at the magnitude of it all",
                "you can now use arrow keys or WASD to move",
                "click and drag to move around, spacebar to boost forward",
                "and double-click to warp",
            ];
            
            var T;
            T = function(){
                if(!squeue.length || intro_cancelled){clearInterval(T);
                    done_with_intro();
                }
                else{
                    var m = squeue.shift();
                    console.log(m)
                    
                    if(m[0]=='END'){//end
                        $("#prettier_game_info").html("THE KNOWLEDGE COSMOS").css({
                            'font-size': '80pt',
                            'font-family': 'cyber',
                            'max-width': '100%',
                            'width': '100%'
                        });
                    } else {
                        $("#prettier_game_info").html(m[0]).css({
                            'font-size': '',
                            'font-family': '',
                            'max-width': '',
                            'width': ''
                        });;
                    }
                    
                    setTimeout(T, m[1]*1000);
                    console.log( m[1]*1000 / m[0].length );
                }
            }
            T();
            
            // 1210, 1267, -364
            // start cruising towards the thing
            var loc={x:viewer.scene.view.position.x, y:viewer.scene.view.position.y, z:viewer.scene.view.position.z}
            
            console.log(TWEEN)
            
            window.Tstart = new TWEEN.Tween(loc)//1623, 1950, 1492
                .to({ x: 1623, y: 1950, z: 1492 }, 60000)
                .easing(TWEEN.Easing.Exponential.Out)
                .onUpdate(() => {
                    viewer.scene.view.position.set( loc.x, loc.y, loc.z );
                    viewer.scene.view.lookAt(730, 691, 725);
                })
                .onComplete(function(){
                    circle(19000);
                    viewer.setPointBudget(2_000_000);
                })
                .start();
        };

        //Potree.loadPointCloud(`../pointclouds/0TOP.las_converted/metadata.json`, "scimap", function(e){
        //Potree.loadPointCloud(`/pointclouds/scimap.las_converted/metadata.json`, "scimap", function(e){
            Potree.loadPointCloud(`/pointclouds/0TOP/metadata.json`, "scimap", function(e){
        
            // we need to spin longer to wait for points to be loaded...
            var TT;
            TT = setInterval(function(){
                if(viewer.scene.pointclouds[0].visibleNodes.length > 0){
                    clearInterval(TT);
                    startPresentation();
                }
            }, 100);
            
            viewer.scene.addPointCloud(e.pointcloud);
            let material = e.pointcloud.material;
            
            viewer.setMoveSpeed( 2.5 );
            viewer.setFOV( 35 );
            viewer.setBackground('white')
    
            // I kind of like this aesthetic, but it causes a terrible flicker
            viewer.setEDLEnabled(true)
            viewer.setEDLRadius(1.1)
            viewer.setEDLStrength(0.1)

            window.main_pc = e.pointcloud;
            window.main_mat = material;

            // console.log(e.pointcloud, material);

            material.size = 0.04;
            material.minimumNodePixelSize = 0;
            material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
            material.shape = Potree.PointShape.CIRCLE;
            //material.activeAttributeName = "elevation";
            material.uniforms.uShadowColor.value = [0.6, 0.6, 0.6];
            
        })
        
        window.skip_intro = function() {
            Tstart.stop();
            intro_cancelled = true;
            
            var loc={x:viewer.scene.view.position.x, y:viewer.scene.view.position.y, z:viewer.scene.view.position.z}
            new TWEEN.Tween(loc)
                    .to({ x: 1623, y: 1950, z: 1492 }, 1000)
                    .onUpdate(() => {
                        viewer.scene.view.position.set( loc.x, loc.y, loc.z );
                        viewer.scene.view.lookAt(730, 691, 725);
                    })
                    .start();
                    
            
            done_with_intro()
            
            viewer.setPointBudget(2_000_000);
        }

        function load_field_potree(S) {

                if(false){
                var X = {
                    gbc0: main_mat.uniforms.uRGB_gbc.value[0],
                    gbc1: main_mat.uniforms.uRGB_gbc.value[1],
                    gbc2: main_mat.uniforms.uRGB_gbc.value[2],
                    op: viewer.getEDLOpacity()
                }
                new TWEEN.Tween(X)
                        .to({gbc0:0, gbc1:-0.6, gbc2:0, op:0.5}, 500)
                        .onUpdate(() => {
                            // nice, fades the colors to the background
                            main_mat.uniforms.uRGB_gbc.value = [X.gbc0, X.gbc1, X.gbc2]
                            //viewer.setEDLOpacity(X.op)
                        })
                        .start();
                }
                

                //Potree.loadPointCloud("../pointclouds/scimap.las_converted/metadata.json", "scimap", function(e){
                Potree.loadPointCloud(`/pointclouds/${S}.3rifaa.las_converted/metadata.json`, S, function(e){

                    viewer.scene.addPointCloud(e.pointcloud);
                    //e.pointcloud.position.z = 0;
                    let material = e.pointcloud.material;
                    //material.size = 0.42;
                    material.size = 0.04;
                    material.minimumNodePixelSize = 0;
                    material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
                    material.shape = Potree.PointShape.CIRCLE;
                    //material.activeAttributeName = "elevation";
                    material.uniforms.uShadowColor.value = [0.6, 0.6, 0.6];

                    window.pc = e.pointcloud

                    /*
                    const coords = viewer.scene.view.position.subScalar(0)
                    new TWEEN.Tween(coords)
                        .to(new THREE.Vector3(1551, 2120, 711), 5000)
                        .onUpdate(() => {
                            viewer.scene.view.position.set(coords.x, coords.y, coords.z);
                            viewer.scene.view.lookAt(578,502,263);
                        })
                        .start();
                    */

                    /*
                    forget this rotation magic. taken up too much time

                    */



                    //pointLight.position.set(415.005, 354.499, 371.803);
                    //pointLight.position.set(1,1,1);
                    //camera.add(pointLight);

                    /*
                    function light_update()
                    {
                        var p=camera.getWorldPosition();
                        light.position.copy( p );
                        light.lookAt( p+camera.getWorldDirection() );
                        console.log( light.position );
                    }

                    viewer.controls.addEventListener( 'change', light_update );
                    */
                });
        }		
        /*

        // Sigeom
        Potree.loadPointCloud("http://5.9.65.151/mschuetz/potree/resources/pointclouds/archpro/heidentor/cloud.js", "Heidentor", function(e){
            viewer.scene.addPointCloud(e.pointcloud);
            e.pointcloud.position.z = 0;
            let material = e.pointcloud.material;
            material.size = 1;
            material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
            material.activeAttributeName = "elevation";
            material.uniforms.uShadowColor.value = [0.6, 0.6, 0.6];

            viewer.scene.view.position.set(19.474, -14.324, 12.829);
            viewer.scene.view.lookAt(0.339, 0.145, 4.073);
        });

        
        Potree.loadPointCloud("../pointclouds/lion_takanawa/cloud.js", "lion", function(e){
            viewer.scene.addPointCloud(e.pointcloud);
            
            let material = e.pointcloud.material;
            material.size = 1;
            material.pointSizeType = Potree.PointSizeType.ADAPTIVE;
            material.uniforms.uShadowColor.value = [0.6, 0.6, 0.6];
            
            e.pointcloud.position.set(0, -2, 0);
            
        });

        */

        viewer.mouse = null;

        $(document).on('mousemove', function(e){
            viewer.mouse = e.originalEvent;
        });
        
        $('canvas').on('mousedown', function(e){
            if(e.originalEvent.button == 0){ // left-click only
                check_and_display();
            }
        });
        
        window.multiplier = 1;

        $(document).on('keypress', function(e){
            if( e.originalEvent.charCode == 32 ) {
                multiplier *= 3
                setTimeout(function(){
                    multiplier /= 3;
                }, 1000)
            }
        });


        window.focal_sphere = null;
        window.focal_i = null;

        var cache = {}
        function get_data(i, callback) {
            if( cache[i] || cache[i]===null ) {
                callback(cache[i]);
                return;
            }

            // fetch and display the info
            $.ajax({
                "url": "/q/paper",
                "method": "GET",
                crossDomain: true,
                "data": {'id':''+i},
                "success": function(resp){
                    if( resp == '0' )
                        cache[i] = null;
                    else
                        cache[i] = $.parseJSON( resp );

                    callback(cache[i]);
                }
            });
        }


        // simply did not work...
        // I couldn't figure out any of the octree apis...
        var loc_cache = [];
        window.loc_cache = loc_cache;
        var search_delt = 5;

        function findpoint(pt, delt){
            for(var li in loc_cache){
                var l = loc_cache[li][0];
                var data = loc_cache[li][1];
                if(
                    (l.x-delt < pt.x && pt.x < l.x+delt) &&
                    (l.y-delt < pt.y && pt.y < l.y+delt) &&
                    (l.z-delt < pt.z && pt.z < l.z+delt)
                ){
                    return {l:l, data:data};
                }
            }
            return null;
        }

        var last_ret = null;

        function search_area(x,y,z, callback){

            var pos = new THREE.Vector3(x,y,z);
            var nearest_query = findpoint({x:x,y:y,z:z},search_delt);
            if( nearest_query ){
                if( nearest_query.l != last_ret ){
                    callback(nearest_query.data);
                    last_ret = nearest_query.l
                }

                return
            }

            last_ret = pos;

            // fetch the info
            $.ajax({
                "url": "/q/location",
                "method": "GET",
                crossDomain: true,
                "data": {'x':x,'y':y,'z':z,'delt':15},
                "success": function(resp){
                    console.log('adding', x, y, z)
                    var resp = $.parseJSON( resp )
                    loc_cache.push([
                        {x:x,y:y,z:z},
                        resp
                    ]);
                    callback(resp);					
                }
            });

        }

        /*
        var locs = [];
        function make_floating_text(l){
            var $lab = $("<div class='floating_text'>");
            $lab.data('coords', {x:l.x, y:l.y, z:l.z});
            
            $lab.html(l.js.title);

            $("#labels").append($lab);
            locs.push($lab);
        }

        var queue = [];

        function chunk_queue(){
            if(!queue.length){
                $("#reporting").html("")
                return;
            }
            var el = queue.pop();
            
            if( el.js.journal )
                var link = `<a target='_blank' href='https://doi.org/${el.js.journal}'>link</a>`
            else
                var link = ''

            $("#reporting").html(`Now passing ${el.js.title}, published ${el.js.year} ${link}`)
        }

        setInterval(chunk_queue, 4000);

        // query every now and then to find points that should be clickable, and put halos around them
        function check(){
            var p = camera.position;
            search_area(p.x,p.y,p.z, function(resp){
                if(false){
                    // remove old ones
                    for(var li in locs){
                        var l = locs[li];
                        l.remove();
                    }
                    locs = [];
                }
                queue = [];

                for( var li in resp ) {
                    queue.push(resp[li]);
                }
            })
        }

        setInterval(check, 3000);
        check();
        */

        if(false){
            // simply did not work...
            // I couldn't figure out any of the octree apis...
            var loc_cache = [];

            // my first spatial query
            //window.query_points = new d3.octree();
            
            
            var search_delt = 500;

            function search_area(x,y,z, callback){

                var pos = new THREE.Vector3(x,y,z);
                var nearest_query = query_points.find({x:x,y:y,z:z},search_delt);
                if( nearest_query ){
                    return nearest_query;
                }
                console.log(nearest_query)

                // fetch the info
                $.ajax({
                    "url": "/q/location",
                    "method": "GET",
                    crossDomain: true,
                    "data": {'x':x,'y':y,'z':z,'delt':15},
                    "success": function(resp){
                        console.log('adding', x, y, z)
                        var resp = $.parseJSON( resp );
                        query_points.add((x,y,z,resp));
                        callback(resp);
                    }
                });
            }

            // query every now and then to find points that should be clickable, and put halos around them
            setInterval(function(){
                var p = camera.position;
                search_area(p.x,p.y,p.z, function(resp){
                    for( var LOC in resp ) {
                        make_floating_text(LOC)
                    }
                })
            }, 10000);
        }

        /*
        window.getAllPointsOfPointCloud = function() {
            var list = [];
            var array = pc.pcoGeometry.root.geometry.attributes.position.array;
            var index = 0;
            for (var i = 0; i < pc.pcoGeometry.root.geometry.attributes.position.length;i=i+3) {
                var x = array[i + 0];
                var y = array[i+ 1];
                var z = array[i + 2];
                let position = new THREE.Vector3(x, y, z);
                position.applyMatrix4(pc.matrixWorld);
                list[index] = position;
                index++;
            }
            return list;
        }
        */
        var w = window.innerWidth, h = window.innerHeight;

        function getScreenPosition(vector) {
            var canvas = viewer.renderer.domElement;

            // map to normalized device coordinate (NDC) space
            vector.project( camera );

            // console.log(vector)
            
            // map to 2D screen space
            vector.x = Math.round( (   vector.x + 1 ) * canvas.width  / 2 );
            vector.y = Math.round( ( - vector.y + 1 ) * canvas.height / 2 );
            vector.z = 0;

            //console.log(vector);

            // console.log(vector)

            return { 
                x: vector.x,
                y: vector.y
            };
        };
        
        window.check_and_display = function() {
        
        
            function killSphere(){
                if( focal_sphere ) {
                    viewer.scene.scene.remove(focal_sphere);
                }
                focal_sphere = null;
                focal_i = null;
            }
            
        
            if(viewer.mouse){

                let I = Potree.Utils.getMousePointCloudIntersection(
                    viewer.mouse,
                    camera,
                    viewer,
                    viewer.scene.pointclouds);

                if (I !== null) {

                    
                    // only instantiate a new one if it's changed etc.
                    var myi = I.point['mag_id'][0];
                    if( (focal_i != myi) ){

                        if (I.distance < 50){
                            console.log(myi, I, I.distance)
                            //console.log(focal_i, I.distance)

                            killSphere();// because we'll make a new one

                            var sphere_geometry = new THREE.SphereGeometry(1, 128, 128);
                            var material = new THREE.MeshNormalMaterial();

                            focal_sphere = new THREE.Mesh(sphere_geometry, material);
                            focal_sphere.position.set( I.location.x, I.location.y, I.location.z );
                            focal_sphere.scale.set( 0.05, 0.05, 0.05 )

                            viewer.scene.scene.add( focal_sphere );

                            focal_i = myi // keep track of the focal ID

                            get_data(focal_i, function(resp){
                                if( resp===null ){
                                    $("#paper_info").html(`
                                        no info found for this paper
                                    `)
                                } else {
                                    if( resp['journal'] )
                                        var link = `<a target='_blank' href='https://doi.org/${resp["journal"]}'>link</a>`
                                    else
                                        var link = ''

                                    $("#paper_info").html(`
                                        Selected Paper: 
                                        ${resp['title']} ${link} 
                                    `)
                                }

                                $("#paper_info").toggle(true)
                            });
                        } else {
                            // too far
                            killSphere();
                            $("#paper_info").toggle(false)
                            // this has been killing me...
                        }
                    } else { 
                        //repeat
                    }
                } else {
                    killSphere();
                    $("#paper_info").toggle(false)
                }
            } 
        }
        
        function changeSpeed(){
            /*
            var x = viewer.renderer.domElement.clientWidth / 2;
            var y = viewer.renderer.domElement.clientHeight / 2;
            
            var m = {x:x, y:y};
            
            let domElement = viewer.renderer.domElement;
            let ray = Utils.mouseToRay(m, camera, domElement.clientWidth, domElement.clientHeight);

            let nodes = main_pc.nodesOnRay(main_pc.visibleNodes, ray);
            let lastNode = nodes[nodes.length - 1];
            
            let sp = lastNode.getBoundingSphere(new THREE.Sphere());
            
            //console.log(sp.center, 000, camera.position, sp);
            var distance = sp.center.distanceTo( camera.position )
            */
            
            var distance = main_pc.boundingSphere.center.distanceTo( camera.position );
            distance = Math.max( 0, distance - main_pc.boundingSphere.radius / 2 );
            var speed = Math.min( 30000, (3 + distance / 2) * multiplier );
            
            //console.log(distance, speed);
            viewer.setMoveSpeed( speed ); 
        }
        
        setInterval(changeSpeed, 100);


        async function in_frame(){


            /*
            for( var li in locs ){
                var l = locs[li];
                var pos = l.data('coords');
                var p = getScreenPosition( new THREE.Vector3(pos.x, pos.y, pos.z) );

                l.css({left: p.x, top: p.y});
            }
            */

/*
            let targetRadius = 0;
            {
                let minimumJumpDistance = 0.2;

                let domElement = this.renderer.domElement;
                let ray = Utils.mouseToRay(mouse, camera, domElement.clientWidth, domElement.clientHeight);

                let nodes = I.pointcloud.nodesOnRay(I.pointcloud.visibleNodes, ray);
                let lastNode = nodes[nodes.length - 1];
                let radius = lastNode.getBoundingSphere(new THREE.Sphere()).radius;
                targetRadius = Math.min(this.scene.view.radius, radius);
                targetRadius = Math.max(minimumJumpDistance, targetRadius);
            }


            for( var X in e.pointcloud.visibleNodes ) {
                for( var Y in X.sceneNode.children ) {
                    let sphere = new THREE.Mesh( new THREE.IcosahedronGeometry( 1, 8 ), material );
                    sphere.position.set( Y.position );
                    console.log(Y.position)
                    viewer.scene.scene.add( sphere );
                }
            }

            console.log( e.pointcloud );
            console.log( e.pointcloud.visibleNodes );
            */

            //pointLight.updateMatrix();
            /*
            if(focal_sphere){
                focal_sphere.updateMatrixWorld()
            }
            */

            let coords = `Coordinates: ${Math.round(camera.position.x)}, ${Math.round(camera.position.y)}, ${Math.round(camera.position.z)}`
            //let lookat = `Looking At: ${Math.round(camera.position.x)}, ${Math.round(camera.position.y)}, ${Math.round(camera.position.z)}`
            var h = `
                Welcome to the game. I'm thinking now about some tour around this beautiful beast.<br>
                <div class='smaller'>
                ${coords}<br/>
                Speed: ${Math.round(viewer.getMoveSpeed())}
                </div>
            `

            if( h != last_h ) {
                $("#game_info .ephemeral").html( h );
                last_h = h;
            }
        }

        var li = 0;
        function loop(timestamp){
            requestAnimationFrame(loop);

            viewer.update(viewer.clock.getDelta(), timestamp);

            if( (li%10)==0 )
                in_frame()



            if( focal_sphere ) {

                var time = performance.now() * 0.003;
                
                // change 'k' value for more spikes
                var k = 3;
                for (var i = 0; i < focal_sphere.geometry.vertices.length; i++) {
                    var p = focal_sphere.geometry.vertices[i];
                    p.normalize().multiplyScalar(1 + 0.3 * noise.perlin3(p.x * k + time, p.y * k + time, p.z * k));
                }
                focal_sphere.geometry.computeVertexNormals();
                focal_sphere.geometry.normalsNeedUpdate = true;
                focal_sphere.geometry.verticesNeedUpdate = true;

            }
            
            // update speed so it is faster as you are further away
            //viewer.setMoveSpeed( camera.position.sub( b ).length() );


            viewer.renderer.render(viewer.scene.scene, camera)
            viewer.render();
            li += 1;
        }

        window.last_h = null;

        requestAnimationFrame(loop);

        window.anim = null;

        window.home = function(){

            var Y = {
                x:viewer.scene.view.position.x,
                y:viewer.scene.view.position.y,
                z:viewer.scene.view.position.z,
                lx:730,ly:691,lz:725
            }

            var view_update = () => {
                viewer.scene.view.position.set(Y.x,Y.y,Y.z);
                viewer.scene.view.lookAt(Y.lx,Y.ly,Y.lz);
            }
            
            var Trans1 = new TWEEN.Tween(Y)
                .onUpdate(view_update)
                .to({x:1623, y:1950, z:1492}, 1000).start();
            anim = Trans1

        }

        window.circle = function(delay) {

            
            // current position for reference
            var a = new THREE.Vector3(viewer.scene.view.position.x, viewer.scene.view.position.y, viewer.scene.view.position.z);

            // target focal point
            var b = new THREE.Vector3(730, 691, 725);

            // current approximate focal point 
            var d = new THREE.Vector3();
            camera.getWorldDirection(d);

            var c = b.clone().sub(a).projectOnVector( d );
            var e = a.clone().add(c);
            
            var X = {angle:0, lk0:e.x, lk1:e.y, lk2:e.z};

            var Rot1 = new TWEEN.Tween(X)
                .to({angle: 2 * Math.PI,
                    lk0:b.x, lk1:b.y, lk2:b.z}, delay||5000)
                .onUpdate(() => {
                    var curlit = a.clone().sub(b);
                    curlit.applyAxisAngle( camera.up, X.angle );
                    var result = b.clone().add( curlit );
                    
                    viewer.scene.view.position.set(result.x, result.y, result.z);
                    //viewer.scene.view.lookAt(X.lk0, X.lk1, X.lk2);
                    viewer.scene.view.lookAt(730, 691, 725);
                });
            Rot1.start();
            anim = Rot1;

        }

        window.tour = function() {
            // current position for reference
            var a = new THREE.Vector3(viewer.scene.view.position.x, viewer.scene.view.position.y, viewer.scene.view.position.z);

            // target focal point
            var b = new THREE.Vector3(400,400,200);

            // current approximate focal point 
            var d = new THREE.Vector3();
            camera.getWorldDirection(d);

            var c = b.clone().sub(a).projectOnVector( d );
            var e = a.clone().add(c);
            
            var Y = {
                x:viewer.scene.view.position.x,
                y:viewer.scene.view.position.y,
                z:viewer.scene.view.position.z,
                lk0:e.x, lk1:e.y, lk2:e.z
            }

            var target = {x:584, y:866, z:358, lk0:400,lk1:400,lk2:200}

            var view_update = () => {
                viewer.scene.view.position.set(Y.x,Y.y,Y.z);
                viewer.scene.view.lookAt(Y.lk0,Y.lk1,Y.lk2);
            }
            
            var Trans1 = new TWEEN.Tween(Y)
                .onUpdate(view_update)
                .to(target, 1000).start();

            anim = Trans1;
        }

        window.stop = function() {
            anim.stop();
        }

        window.brain = function() {
            var slice = new Potree.ClipVolume({})
            pc.material.clipTask = Potree.ClipTask.SHOW_INSIDE;

            viewer.scene.addPolygonClipVolume(slice);
        }
        
        window.field_mode = function() {
            $(".right_boy").toggle(false);
            $("#legend").toggle(true);
        }
        
        window.constellation = function() {
            $(".right_boy").toggle(false);
            $("#constellation").toggle(true);
            //var what = prompt("Enter a field to add its constellation to the map, e.g. 'Sociology'");
            //highlight(what);
        }
        
        $("#constellation #field_lookup").autocomplete({source:fields});
        $("#constellation #field_add").click(function(){
            highlight( $("#field_lookup").val(), function(ret){
                var c = ret.color;
                
                var $item = $("<div class='legend_item'>");
                
                var $r_link = $("<div class='link'>remove</a>").click(function(){
                    viewer.scene.scene.remove(ret.mesh);
                    $item.remove();
                });
                
                $item.append(
                    $(`<svg height="25" width="25" style="stroke:rgb(${c[0]},${c[1]},${c[2]}); stroke-width:2px;">
                        <polygon points="12.5,3 5,20 20,20" class="triangle" />
                    </svg>`),
                    $(`<span class='lab'>${ret.name}</span>`),
                    $r_link
                );
                
                $("#const_legend").append($item);
            })
        })
        
        $("#menu .title").click(home);
        
    </script>

<div id="game_info" style='display:none'>
    <div class='ephemeral'>This is only a game.	</div>
    <div class='always'>
        <a href='#' onclick='javascript:home();'>Home</a>, <a href='javascript:circle();'>Circle</a>, <a href='javascript:tour();'>Tour</a>,
        <a href='#' onclick='javascript:brain();'>Brain Scan</a>
        <br/><a href='javascript:stop();'>Stop All</a>
    </div>
</div>

<div id="prettier_game_info">
    Loading...
</div>
<div id="paper_info" style='display:none'></div>
<!--<div style='
    border-radius: 15px;
    overflow: hidden;
    width: 320px;
    float: right;
    margin-right: 22px;
    max-height: calc(100% - 60px);
'>-->
    <div id="legend" class='right_boy' style='display:none; margin-right:0; margin-top:0;'></div>
<!--</div>-->
<div id="constellation" class='right_boy' style='display:none;'>
    <p>
        Specify an academic field to show its constellation in the map.
        This constellation shows the approximate bounds of where papers in the field are located.
        This can be used along with <i>filter</i> to explore intersections and interactions between fields.
    </p>
    <input id='field_lookup' placeholder='Enter an academic field'/>
    <button id='field_add'>Add Constellation</button>
    <span id='field_bug' style='display:none;'></span>
    <div id='const_legend'></div>
</div>

<div id="reporting" style='display:none;'></div>
<div id="labels"></div>
<div id="menu">
    <div class='title' style='display:none'>The Knowledge Cosmos</div>
    <div class='item' id='skip_intro' onclick='skip_intro();' style='display:none'>Skip Intro</div>
    <div class='item' id='field_mode' onclick='field_mode();' style='display:none'>Filters</div>
    <div class='item' id='constellations' onclick='constellation();' style='display:none'>Constellations</div>
</div>


<style>
.title {
    font-family: cyber;
    display: inline-block;
    font-size: 14pt;
    margin-right: 20px;
}
    #tips_close, #comments_close, #tips_next{
        cursor: pointer;
        text-decoration: underline;
    }
    #tips{
        text-align:left;
    }
</style>

<style>

/* updating to black style swatches*/
.swatch {
    width: 15px;
    height: 15px;
    display: inline-block;
    margin-right: 6px;
    border-radius: 8px;
}

.legend_expansion {
    background-color: black;
    color: white;
    padding: 10px;
    border-radius: 15px;
    margin-top: 5px;
    margin-bottom: 10px;
}

/*
    // swatches which touch space
    .swatch {
        width: 26px;
        height: 12px;
        display: inline-block;
        margin-right: 6px;
        border: 6px solid black;
        margin-left: -16px;
    }
    .label {
        display: inline-block;
        vertical-align: top;
        margin-top: 3px;
    }
*/
</style>

<div id="tips_link" class='linky' style='display:none;'>Tips</div>
<div id="comment_link" class='linky' style='display:none;'>Comments</div>

<div id="tips">
    <p class='focused'>Navigation: Use the Left and Right Arrow Keys to move left and right. 
        Use the Up and Down Arrow Keys to move forward and backwards. 
        Use R and F to move the ship up and down
    </p>
    <p>
        Use the Space Bar to boost forward. 
        Click and Drag to explore around. 
    </p>
    <p>
        Double click to enter the cloud and propel forward in the cloud. 
        To exit the cloud, Press "S" or Down Key and the Space Bar to boost
    </p>
    <p>Colored Dots: Click on the colored dots to reveal academic paper titles and links.</p>
    <p>Filter: Add a filter to specify the discipline you want to focus on exploring.</p>
    <p>Constellation: Select and layer constellations to see how disciplines intersect. 
        Combine filter tool and constellation to explore papers and the intersection of multiple disciplines.</p>
    <p>
        Click on 'The Knowledge Cosmos' to return to your first view of the cloud.
    </p>
    <span id="tips_next">Next</span>
    <span id="tips_close">Close</span>
</div>

<div id='comment_box' style="display:none; position: absolute;z-index: 3;background-color: white;padding: 15px;border-radius: 15px;left: 22px;bottom: 22px;width: 300px;">
    <!-- begin wwww.htmlcommentbox.com -->
    <div id="HCB_comment_box"><a href="http://www.htmlcommentbox.com">Comment Form</a> is loading comments...</div>
    <div id='comments_close'>Close</div>
    <link rel="stylesheet" type="text/css" href="https://www.htmlcommentbox.com/static/skins/bootstrap/twitter-bootstrap.css?v=0">
    <script type="text/javascript" id="hcb"> /*<!--*/ if(!window.hcb_user){hcb_user={};} (function(){var s=document.createElement("script"), l=hcb_user.PAGE || (""+window.location).replace(/'/g,"%27"), h="https://www.htmlcommentbox.com";s.setAttribute("type","text/javascript");s.setAttribute("src", h+"/jread?page="+encodeURIComponent(l).replace("+","%2B")+"&opts=16798&num=10&ts=1670172601141");if (typeof s!="undefined") document.getElementsByTagName("head")[0].appendChild(s);})(); /*-->*/ </script>
<!-- end www.htmlcommentbox.com -->
</div>

<style>

#HCB_comment_box a {
    display: none;
}
.home-desc {
    display: none !important;
}

#tips p {
    display: none;
}
#tips p.focused {
    display: block;
}
</style>

<script>
    var nextT;
    
    function nexttip(){
        var current = $("#tips p.focused");
        var next = current.next();
        if(next.prop('tagName') == 'SPAN'){
            next = $("#tips p").first();
        }
        
        current.toggleClass('focused', false);
        next.toggleClass('focused', true);
        
        console.log(current, next)
        
        clearTimeout(nextT);
        nextT = setTimeout(nexttip, 5000);
    }

    nextT = setTimeout(nexttip, 5000);
    
    $("#tips_link, #tips_close").click(function(){
        $("#tips").toggle();
    })
    
    $("#comment_link, #comments_close").click(function(){
        $("#comment_box").toggle();
    })
    
    $("#tips_next").click(nexttip);
</script>

    </body>
</html>
